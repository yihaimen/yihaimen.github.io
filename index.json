[{"categories":["TestDrivingJSApp"],"content":"将学会如何及时地编写测试，并用这些测试来影响代码的设计","date":"13130-01-130","objectID":"/2020/06/4%E5%B9%B4%E5%90%8E%E6%88%91%E5%86%8D%E6%AC%A1%E5%85%A5%E9%97%A8tdd/","tags":["JavaScript","TDD","Jest"],"title":"4 年后，我再次入门 TDD","uri":"/2020/06/4%E5%B9%B4%E5%90%8E%E6%88%91%E5%86%8D%E6%AC%A1%E5%85%A5%E9%97%A8tdd/"},{"categories":["TestDrivingJSApp"],"content":"0x01 引言 你好，我是以卖码为生的海门。今天想和大家探讨一下应该从哪里着手 TDD，以及要进行哪些类型的测试。本文及以后的文章都将使用 Jest 作为我们的测试工具。 刚毕业时，进了一家小微企业，这时不要求为代码写单测，我也不知道 TDD 的存在。直到进入第二家公司遇到了中仁并认识了亦乐，我们一起运营 freeCodecamp 社区，才有幸参加了一次由中仁发起的 TDD 工作坊，这是我第一次认识它，但并不会使用。我的第一次入门应该算是参加了熊节老师的训练营，可课程结束后，我学会了盲打，识别部分坏味道和重构手法，使用大部分快捷键，但我依然觉得自己不知如何去写 Unit Test，这是我再次学习和入门的原因。 0x02 让我们开始吧 第一步，我不会告诉你怎么安装开发环境，我只会告诉你怎么验证你的环境是否安装正确。 金丝雀测试，是最简单的测试，它的作用就是验证开发环境是否安装正确，确保正确开始。它存在的意义因此受到了质疑，但我认为保留它是有必要的。比如当我们换了新的工具或环境，它可以帮助我们快速的验证环境的正确性。 0x03 举个栗子：回文项目 在正式编码前，我会告诉你，入门 TDD 我们需要编写三种类型的测试： 正向测试：当前置条件满足时，验证代码的结果确实符合预期； 反向测试：当前置条件或输入不符合要求时（如：边界情况，非法输入），代码能优雅地进行处理，可以检查系统的容错能力和可靠性； 异常测试：代码在应该抛出异常的地方正确地抛出了异常。 我还会告诉你，每个单测都遵循 3As 模式： Arrange：准备数据； Act：执行待测函数； Assert：断言结果。 最后，别人闭口不提的，我也会告诉你： 测试套件（关键字 describe）是一组相关测试的集合，这组测试可以是验证一个函数，也可以是验证一组密切相关的函数的行为； 测试套件和测试用例的名称都需要简洁明了，且测试用例的名称要清楚表达测试目的和期望得到的结果，因为单测只是为了验证代码的正确行为，而我们的测试名称，描述、表达并记录了代码的行为，或者说原始需求； 当使用 3As 模式时，为了让代码看着舒服，不同的部分之间用空行隔开，另外每个单测里边的代码也需要保持简短，比如能用一行代码解决的事，也就不需要这个三部分了； 要是一个单测代码冗长复杂，它可能表达出了两种意思：一是测试的代码写的不好，二是待测函数的设计不行； 关注行为而非状态，避免为获取、设置状态的函数编写测试。从有业务价值的、有意思的行为开始编写。在这个过程中对那些必要的状态进行设置和获取。 Emm…可以写代码了吗？ 首先，我通过分析需求，拆解出了若干任务列表，根据某个任务列表将迅速想到的用例记录在测试列表中，如下： mom 是回文 momu 不是回文 dad 是回文 空字符串不是回文 两个空格串不是回文 不传参，抛出参数非法异常 记住，测试列表需要不断的去完善它，因为你每前进一步，也许会想到新的问题。 好嘞，我们的第一个正向测试就出来了： 嘿，好家伙！这个测试么有通过。来看下 Jest 给我们反馈的信息： isPalindrome 函数没有实现或者还没有导入，那接下来我们将实现它并导入到测试文件中。 大家可以看到，我并没有一口气实现这个方法，而是使用初始测试驱动函数的接口设计，目的是为了让代码更具表现力和可读性。此时我们需要考虑： 函数名是否清晰描述代码功能 形参个数和名称是否满足需求 返回值类型是否正确 等… 让测试驱动设计，能够让我们将想到的问题提出来，帮助发现细节，然后在这个过程中梳理出代码的接口，还有可能找出需求的缺陷。 现在函数接口已经确定下来了，接下来的单测和实现，我将按照 TDD 的开发流程编写剩下所有的代码。剩下的代码就不贴出来了，需要的在 https://github.com/yihaimen/JestJsApp 自提，可以的话留个小星星哈！ Red - Green - Refactor Workflow： 编写测试用例； 运行测试，无法通过； 实现函数，测试用例通过； 优化代码，完成开发； 重复上述步骤。 0x04 代码覆盖率报告 代码覆盖率报告是很有价值的，但是也不能过度依赖它。 有价值的方面： 得到老板的夸奖； 能快速标识出哪些代码没有被测试覆盖到。 不过度依赖它，是因为它实际的数值并不特别重要，通常只有糟糕的数据令我们头疼，但良好的数据我们也要引起警觉。 比如，我某个文件的覆盖率是 98%，远远高于公司定的 80% 的标准，但是就是有一行代码没有被覆盖到，敢说这是合格的测试吗？此时，我们更需要关注的是检查哪行代码没有被测试覆盖，同时确保在修改代码时覆盖率数值没有降低。 如果你认为每一行代码都覆盖到了，就值得高歌一曲，我要告诉你代码都覆盖了也不一定是编写了充分的测试。我们可以从未覆盖的代码发现设计的缺陷，但我们不能从全部覆盖的代码上看到问题，所以我们还需要做代码和测试的审查来弥补。 0x05 总结 测试先行，有助于完善代码设计；小步迭代，有助于快速获取反馈重构代码。 最后，我们发现： 测试必须快速，以便我们快速获取反馈； 自动化校验，解放双手； 相互独立，测试结果互不依赖； 可重复执行n次且结果一致。 上边这四点说的就是著名的 F.A.I.R 原则！ 0x06 参考 《JavaScript测试驱动开发》 Jest 官网 往期推荐 你真的会写UnitTest吗？ ","date":"13130-01-130","objectID":"/2020/06/4%E5%B9%B4%E5%90%8E%E6%88%91%E5%86%8D%E6%AC%A1%E5%85%A5%E9%97%A8tdd/:0:0","tags":["JavaScript","TDD","Jest"],"title":"4 年后，我再次入门 TDD","uri":"/2020/06/4%E5%B9%B4%E5%90%8E%E6%88%91%E5%86%8D%E6%AC%A1%E5%85%A5%E9%97%A8tdd/"},{"categories":null,"content":"易海门到底是谁？","date":"5050-10-50","objectID":"/about/","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"我是一名前端开发工程师，虽是科班出身，但在工作后越发的觉得基础的重要性。 所以我想专注于分享计算机基础，一边分享知识一边学习知识，提升自我，相互促进！ 现是 freeCodecamp 西安负责人，ByteWars 创始人之一，加入或创建这些社区，目的就是为了把经验（坑）分享出来，让后浪们少走弯路。 只有悄悄让自己拔尖，才能撑起成年人的不易。总之面包一定要有，肉也不能少。 ","date":"5050-10-50","objectID":"/about/:0:0","tags":null,"title":"关于","uri":"/about/"},{"categories":["TestDrivingJSApp"],"content":"通过学习到达真的会写UnitTest的目的","date":"2020-05-20","objectID":"/2020/05/%E6%88%91%E7%9C%9F%E7%9A%84%E4%BC%9A%E5%86%99unittest%E5%90%97/","tags":["JavaScript","TDD","UnitTest"],"title":"我真的会写UnitTest吗？","uri":"/2020/05/%E6%88%91%E7%9C%9F%E7%9A%84%E4%BC%9A%E5%86%99unittest%E5%90%97/"},{"categories":["TestDrivingJSApp"],"content":"引子 上周和中仁聊到了 Test Double，可是对于那几个概念依然不是很清晰。于是对自己进行了灵魂拷问：我真的会写UnitTest吗？这其实包含两个意思：一个是会为业务代码写UnitTest，另一个是知道该怎么写UnitTest。最终，我被自己问住了。 ","date":"2020-05-20","objectID":"/2020/05/%E6%88%91%E7%9C%9F%E7%9A%84%E4%BC%9A%E5%86%99unittest%E5%90%97/:0:1","tags":["JavaScript","TDD","UnitTest"],"title":"我真的会写UnitTest吗？","uri":"/2020/05/%E6%88%91%E7%9C%9F%E7%9A%84%E4%BC%9A%E5%86%99unittest%E5%90%97/"},{"categories":["TestDrivingJSApp"],"content":"查资料 通过查看并回顾相关资料，我暂时了解了以下概念： 什么是测试？- 对代码功能的正确性验证 为什么要测试？- 解决各种“灵异”事件（神出鬼没的BUG），保证代码质量，更好的还原需求，最重要的是要测交付价值 不写无用的测试 有哪些测试？- 单元测试、集成测试、性能测试等 单元测试中的一个单元指的是什么？- 书面说明是最小可测试单元。我认为可以是一个函数或者一个类。期待大家的答案 单元测试有几种常用方法论？- TDD、BDD \u003c方法论不重要，重要的是使用方法论的人\u003e TDD：侧重点偏向开发，通过 Test Case 来提高代码的质量和设计 BDD：由外到内的开发方式，先定义业务成果，再实现这些业务成果，最后转化为验收标准 TDD 步骤（三角法） 伪代码 真代码 重构代码 TDD 思想 - 测试先行，小步迭代，重构和持续反馈 写好单元测试的原则 - F.I.R.S.T Fast - 测试必须快速 Independent - 测试独立，如测试结果不依赖环境或运行顺序 Repeatable - 可重复执行的纯函数 Self-validating - 自动化校验 Thorough and Timely - 尽量覆盖全部场景 如何覆盖全部场景？- 自补白盒测试 每个测试三段论 准备数据 - Given 执行待测函数 - When 断言结果 - Then Test Double 有哪些？- 针对这个，我还是有些概论比较模糊，期待大家的答案 Dummy Fake Stub Mock Spy ","date":"2020-05-20","objectID":"/2020/05/%E6%88%91%E7%9C%9F%E7%9A%84%E4%BC%9A%E5%86%99unittest%E5%90%97/:0:2","tags":["JavaScript","TDD","UnitTest"],"title":"我真的会写UnitTest吗？","uri":"/2020/05/%E6%88%91%E7%9C%9F%E7%9A%84%E4%BC%9A%E5%86%99unittest%E5%90%97/"},{"categories":["TestDrivingJSApp"],"content":"结语 为了写好一个单元测试，需要知道和理解的不仅仅是上边那些，比如还需要有识别代码中坏味道的能力，好的代码书写习惯，准确快速的盲打手法，快捷键的使用等等。接下来，我将边学习边分享的方式与大家一道，最终一同到达我真的会写 Unit Test 的目的。 ","date":"2020-05-20","objectID":"/2020/05/%E6%88%91%E7%9C%9F%E7%9A%84%E4%BC%9A%E5%86%99unittest%E5%90%97/:0:3","tags":["JavaScript","TDD","UnitTest"],"title":"我真的会写UnitTest吗？","uri":"/2020/05/%E6%88%91%E7%9C%9F%E7%9A%84%E4%BC%9A%E5%86%99unittest%E5%90%97/"}]